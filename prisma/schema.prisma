// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "./generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Channel {
  TELEGRAM
  WHATSAPP
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  password      String
  username      String?   @unique
  firstName     String?
  lastName      String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  isActive      Boolean   @default(true)
  lastMessageAt DateTime?
  fsmState      String?
  fsmContext    Json?
  preferences   UserQuestionPreference[]
  answers       Answer[]
  channels      UserChannel[]
  dailyQuestions DailyQuestionSequence[]
}

model UserChannel {
  id            String   @id @default(cuid())
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String
  channel       Channel
  channelUserId String
  isEnabled     Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@unique([channel, channelUserId])
}

model Question {
  id          String    @id @default(cuid())
  text        String
  options     String[]  // Array of valid multiple choice options
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  isActive    Boolean   @default(true)
  preferences UserQuestionPreference[]
  answers     Answer[]
  topics      QuestionTopic[]
  dailyQuestions DailyQuestionSequence[]
}

model Topic {
  id          String    @id @default(cuid())
  name        String    @unique
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  isActive    Boolean   @default(true)
  questions   QuestionTopic[]
}

model QuestionTopic {
  id         String   @id @default(cuid())
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId String
  topic      Topic    @relation(fields: [topicId], references: [id], onDelete: Cascade)
  topicId    String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([questionId, topicId])
}

model UserQuestionPreference {
  id         String   @id @default(cuid())
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId String
  isEnabled  Boolean  @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([userId, questionId])
}

model Answer {
  id         String   @id @default(cuid())
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId String
  answer     String
  createdAt  DateTime @default(now())
}

model DailyQuestionSequence {
  id         String   @id @default(cuid())
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId String
  sentAt     DateTime @default(now())
  date       DateTime @default(now()) @db.Date
  answered   Boolean  @default(false)
  createdAt  DateTime @default(now())

  @@unique([userId, questionId, date])
}
